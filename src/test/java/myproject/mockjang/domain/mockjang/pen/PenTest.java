package myproject.mockjang.domain.mockjang.pen;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.List;
import myproject.mockjang.IntegrationTestSupport;
import myproject.mockjang.domain.mockjang.barn.Barn;
import myproject.mockjang.domain.mockjang.cow.Cow;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class PenTest extends IntegrationTestSupport {

  @DisplayName("축사칸은 단일 소를 등록할 수 있다.")
  @Test
  void registerOneCow() {
    //given
    Pen pen = Pen.builder()
        .penId("1-1")
        .build();
    Cow cow = createCow("1111");
    //when
    pen.addCow(cow);

    //then
    assertThat(pen.getCows()).hasSize(1);
    assertThat(pen.getCows()).contains(cow);
  }

  @DisplayName("축사칸은 여러 소를 등록할 수 있다.")
  @Test
  void registerMultiCow() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow cow1 = createCow("1111");
    Cow cow2 = createCow("1112");
    //when
    pen.addCow(List.of(cow1, cow2));

    //then
    assertThat(pen.getCows()).hasSize(2);
    assertThat(pen.getCows()).contains(cow1, cow2);
  }

  @DisplayName("축사칸을 등록하면 축사의 축사칸 리스트에 등록된다.")
  @Test
  void registerBarn() {
    //given
    Barn barn = Barn.createBarn("1번축사");

    Pen pen1 = Pen.createPen("1-1");
    Pen pen2 = Pen.createPen("1-2");
    pen1.registerBarn(barn);
    pen2.registerBarn(barn);

    //when
    List<Pen> pens = barn.getPens();

    //then
    assertThat(pens).hasSize(2);
    assertThat(pens).contains(pen1, pen2);
  }

  @DisplayName("축사칸의 축사를 변경할 수 있다.")
  @Test
  void changeBarnTo() {
    //given
    Barn barn1 = Barn.createBarn("1번축사");
    Barn barn2 = Barn.createBarn("2번축사");

    Pen pen = Pen.createPen("1-1");
    pen.registerBarn(barn1);

    //when
    pen.changeBarnTo(barn2);
    List<Pen> findPens1 = barn1.getPens();
    List<Pen> findPens2 = barn2.getPens();

    //then
    assertThat(pen.getBarn()).isEqualTo(barn2);
    assertThat(findPens1).hasSize(0);
    assertThat(findPens2).hasSize(1);
    assertThat(findPens1).isEmpty();
    assertThat(findPens2).containsOnly(pen);
  }

  @DisplayName("축사칸의 소 리스트에서 소를 제거한다.")
  @Test
  void deleteCow() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow cow = createCow("1111");
    cow.registerPen(pen);

    //when
    pen.deleteCow(cow);

    //then
    assertThat(pen.getCows()).isEmpty();
  }


}