package myproject.mockjang.domain.mockjang.pen;

import static myproject.mockjang.exception.Exceptions.COMMON_ALREADY_EXIST;
import static myproject.mockjang.exception.Exceptions.COMMON_NO_UNDER_GROUP;
import static myproject.mockjang.exception.Exceptions.COMMON_NO_UPPER_GROUP;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.List;
import myproject.mockjang.IntegrationTestSupport;
import myproject.mockjang.domain.mockjang.barn.Barn;
import myproject.mockjang.domain.mockjang.cow.Cow;
import myproject.mockjang.domain.mockjang.cow.Gender;
import myproject.mockjang.exception.Exceptions;
import myproject.mockjang.exception.common.AlreadyExistException;
import myproject.mockjang.exception.common.ThereIsNoGroupException;
import myproject.mockjang.exception.common.UpperGroupAlreadyExistException;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class PenTest extends IntegrationTestSupport {

  @DisplayName("축사칸은 단일 소를 등록할 수 있다.")
  @Test
  void registerOneCow() {
    //given
    Pen pen = Pen.builder()
        .codeId("1-1")
        .build();
    Cow cow = createCow("1111");
    //when
    pen.addCow(cow);

    //then
    assertThat(pen.getCows()).hasSize(1);
    assertThat(pen.getCows()).contains(cow);
  }

  @DisplayName("축사칸에 동일한 id를 가진 소를 등록하면 예외를 발생시킨다.")
  @Test
  void registerDuplicatedCow() {
    //given
    Pen pen = Pen.builder()
        .codeId("1-1")
        .build();
    Cow cow = createCow("1111");

    //when
    pen.addCow(cow);

    //then
    assertThatThrownBy(() -> pen.addCow(cow)).isInstanceOf(AlreadyExistException.class)
        .hasMessage(COMMON_ALREADY_EXIST.formatMessage(cow.getCodeId()));
  }

  @DisplayName("축사칸은 여러 소를 등록할 수 있다.")
  @Test
  void registerMultiCow() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow cow1 = createCow("1111");
    Cow cow2 = createCow("1112");
    //when
    List<Cow> cows = List.of(cow1, cow2);
    for (Cow cow : cows) {
      pen.addCow(cow);
    }

    //then
    assertThat(pen.getCows()).hasSize(2);
    assertThat(pen.getCows()).contains(cow1, cow2);
  }

  @DisplayName("축사칸을 등록하면 해당 상위 축사의 축사칸 리스트에 등록된다.")
  @Test
  void registerUpperGroup() {
    //given
    Barn barn = Barn.createBarn("1번축사");

    Pen pen1 = Pen.createPen("1-1");
    Pen pen2 = Pen.createPen("1-2");
    pen1.registerUpperGroup(barn);
    pen2.registerUpperGroup(barn);

    //when
    List<Pen> pens = barn.getPens();

    //then
    assertThat(pens).hasSize(2);
    assertThat(pens).contains(pen1, pen2);
  }

  @DisplayName("이미 등록된 축사가 존재할 때 호출하면 예외를 발생시킨다.")
  @Test
  void registerMultiBarn() {
    //given
    Barn barn1 = Barn.createBarn("1번축사");
    Barn barn2 = Barn.createBarn("2번축사");

    Pen pen1 = Pen.createPen("1-1");
    pen1.registerUpperGroup(barn1);

    //when //then
    assertThatThrownBy(() -> pen1.registerUpperGroup(barn2)).isInstanceOf(
        UpperGroupAlreadyExistException.class).hasMessage(
        COMMON_ALREADY_EXIST.formatMessage(Barn.class));

  }

  @DisplayName("축사칸의 축사를 변경할 수 있다.")
  @Test
  void changeBarnTo() {
    //given
    Barn barn1 = Barn.createBarn("1번축사");
    Barn barn2 = Barn.createBarn("2번축사");

    Pen pen = Pen.createPen("1-1");
    pen.registerUpperGroup(barn1);

    //when
    pen.changeUpperGroup(barn2);
    List<Pen> findPens1 = barn1.getPens();
    List<Pen> findPens2 = barn2.getPens();

    //then
    assertThat(pen.getBarn()).isEqualTo(barn2);
    assertThat(findPens1).hasSize(0);
    assertThat(findPens2).hasSize(1);
    assertThat(findPens1).isEmpty();
    assertThat(findPens2).containsOnly(pen);
  }

  @DisplayName("축사칸의 소 리스트에서 소를 제거한다.")
  @Test
  void removeOneOfUnderGroups() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow cow = createCow("1111");
    cow.registerUpperGroup(pen);

    //when
    assertThat(pen.getCows()).contains(cow);
    pen.removeOneOfUnderGroups(cow);

    //then
    assertThat(pen.getCows()).isEmpty();
  }

  @DisplayName("호출 시점에 상위 그룹이 존재하지 않을 시 예외를 발생시킨다.")
  @Test
  void getUpperGroupWithNoUpperGroup() {
    //given
    Pen pen = Pen.createPen("1-1");

    //when //then
    assertThatThrownBy(pen::getUpperGroup).isInstanceOf(ThereIsNoGroupException.class)
        .hasMessage(COMMON_NO_UPPER_GROUP.formatMessage(Pen.class));
  }

  @DisplayName("호출 시점에 하위 그룹 리스트가 비어있다면 예외를 발생시킨다.")
  @Test
  void removeOneOfUnderGroupsWithEmptyUnderGroups() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow noRelatedCow = createCow("0001", Gender.MALE);

    //when //then
    assertThatThrownBy(() -> pen.removeOneOfUnderGroups(noRelatedCow)).isInstanceOf(
        ThereIsNoGroupException.class).hasMessage(COMMON_NO_UNDER_GROUP.formatMessage(Pen.class));
  }

  @DisplayName("하위 그룹 리스트에 찾는 하위 그룹이 없다면 예외를 발생시킨다.")
  @Test
  void removeOneOfUnderGroupsWithNoUnderGroup() {
    //given
    Pen pen = Pen.createPen("1-1");
    Cow relatedCow = createCow("0001", Gender.MALE);
    Cow noRelatedCow = createCow("0001", Gender.MALE);

    relatedCow.registerUpperGroup(pen);

    //when //then
    assertThatThrownBy(() -> pen.removeOneOfUnderGroups(noRelatedCow)).isInstanceOf(
        ThereIsNoGroupException.class).hasMessage(COMMON_NO_UNDER_GROUP.formatMessage(Pen.class));
  }


}